name: Code Review Agent CI/CD

on:
  pull_request:
    branches: [ main ]

jobs:
  review:
    runs-on: ubuntu-latest
    env:
      REVIEW_PORT: 8080
      WEBHOOK_PORT: 6969
      TARGET_REPO: "Per0x1de-1337/Review"  

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Update system packages
        run: sudo apt update

      # Cache Go modules to avoid downloading dependencies repeatedly
      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Cache Node.js dependencies
      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache GolangCI-Lint binary
      - name: Cache GolangCI-Lint
        id: golangci-cache
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/golangci-lint
          key: ${{ runner.os }}-golangci-lint-v1.55.2
          restore-keys: |
            ${{ runner.os }}-golangci-lint-

      - name: Install Dependencies (Go, Node.js, ESLint, GolangCI-Lint, GitHub CLI)
        run: |
          sudo apt install -y golang nodejs npm gh
          
          # Install npm dependencies only if not cached
          if [ ! -d "~/.npm" ]; then
            npm install -g eslint
          fi

          # Install GolangCI-Lint only if not cached
          if [ ! -f "/usr/local/bin/golangci-lint" ]; then
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/local/bin v1.55.2
          fi

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # - name: start 6000
      #   run: nohup lt --port 8221 > server.log 2>&1 &
      # - name: Install ngrok
      #   run: wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip;unzip -qq ngrok-stable-linux-amd64.zip;
      # - name: Start ngrok tunnel
      #   run: ./ngrok authtoken 2rqMCQpGwy8Hefx932ZJQCVS0U0_35MwNuTKQeaCf8Kst8LPL && nohup ngrok http 6000 > /dev/null 2>&1 & sleep 5 && curl -s http://127.0.0.1:4040/api/tunnels | grep -o '"public_url":"[^"]*' | cut -d'"' -f4           # save_url_to_filename: ngrok_url.txt

      # - name: Retrieve ngrok URL
      #   run:  cat ngrok_url.txt ; export NGROK_URL=$(cat ngrok_url.txt) ; echo "NGROK_URL=${NGROK_URL}" ; env
      - name: Install Cloudflare Tunnel
        run: |
          curl -fsSL https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/

      - name: Start Python HTTP Server
        run: nohup python3 -m http.server 6969 > server.log 2>&1 &

      - name: Start Cloudflare Tunnel
        run: nohup cloudflared tunnel --url http://localhost:6969 > cloudflare.log 2>&1 &

      - name: Retrieve Cloudflare Tunnel URL
        run: |
          sleep 10  # Wait for Cloudflare Tunnel to start
          CLOUDFLARE_URL=$(grep -oP 'https://[a-zA-Z0-9.-]+\.trycloudflare\.com' cloudflare.log | head -n 1)
          if [ -z "$CLOUDFLARE_URL" ]; then
            echo "Error: Cloudflare Tunnel URL not found!" >&2
            exit 1
          fi
          echo "CLOUDFLARE_URL=$CLOUDFLARE_URL" >> $GITHUB_ENV

      - name: Output Cloudflare URL
        run: echo "Your Cloudflare Tunnel URL is" $CLOUDFLARE_URL

      - name: Authenticate GitHub CLI
        run: gh auth login
      - name: Set REPO Variable
        run: echo "REPO=${{ env.TARGET_REPO }}" >> $GITHUB_ENV

      - name: Validate Required Variables
        run: |
          if [ -z "$CLOUDFLARE_URL" ]; then
            echo "❌ Error: CLOUDFLARE_URL is not set!" >&2
            exit 1
          else
            echo "✅ CLOUDFLARE_URL is set: $CLOUDFLARE_URL"
          fi
      
          if [ -z "$REPO" ]; then
            echo "❌ Error: REPO is not set!" >&2
            exit 1
          else
            echo "✅ REPO is set: $REPO"
          fi
      - name: Generate Webhook JSON Config
        run: |
          jq -n --arg url "${CLOUDFLARE_URL}/webhook" '{
            "name": "web",
            "active": true,
            "events": ["pull_request"],
            "config": {
              "url": $url,
              "content_type": "json",
              "insecure_ssl": "0"
            }
          }' > webhook_payload.json
      
          echo "🔍 Generated Webhook JSON:"
          cat webhook_payload.json
      - name: Debug GitHub Authentication
        run: |
          echo "🔍 Checking GitHub authentication..."
          gh auth status || { echo "❌ GitHub CLI is not authenticated!"; exit 1; }
      - name: Create GitHub Webhook
        run: |
          echo "🚀 Creating GitHub Webhook for repository: $REPO"
          gh api --method POST /repos/$REPO/hooks --input webhook_payload.json



      - name: Set Environment Variables
        run: |
          echo "REPO_URL=/repos/${{ env.TARGET_REPO }}/hooks" >> $GITHUB_ENV
          echo "WEBHOOK_URL=${{ env.CLOUDFLARE_URL }}/webhook" >> $GITHUB_ENV
      - name: Validate Required Variables
        run: |
          echo "DEBUG: CLOUDFLARE_URL='${{ env.CLOUDFLARE_URL }}'"
          echo "DEBUG: WEBHOOK_URL='${{ env.WEBHOOK_URL }}'"

          if [ -z "${{ env.CLOUDFLARE_URL }}" ]; then
            echo "Error: CLOUDFLARE_URL is not set!" >&2
            exit 1
          fi
      - name: Fetch Existing Webhooks
        run: |
          RESPONSE=$(gh api "${{ env.REPO_URL }}" || echo "")

          if ! echo "$RESPONSE" | jq -e . >/dev/null 2>&1; then
            echo "Error: Invalid JSON response from GitHub API."
            echo "Response: $RESPONSE"
            exit 1
          fi

          echo "GITHUB_API_RESPONSE=$RESPONSE" >> $GITHUB_ENV
      - name: Check Existing Webhook
        run: |
          HOOK_ID=$(echo '${{ env.GITHUB_API_RESPONSE }}' | jq -r --arg url "${{ env.WEBHOOK_URL }}" '.[] | select(.config.url==$url) | .id' || echo "")

          if [ -n "$HOOK_ID" ] && [ "$HOOK_ID" != "null" ]; then
            echo "Webhook already exists with ID: $HOOK_ID"
            echo "HOOK_ID=$HOOK_ID" >> $GITHUB_ENV
          else
            echo "No existing webhook found."
          fi
      - name: Create Webhook (If Needed)
        if: env.HOOK_ID == ''
        run: |
          echo "Creating new webhook for PR events..."
          gh api --method POST "${{ env.REPO_URL }}" --input <(jq -n --arg url "${{ env.WEBHOOK_URL }}" '{
            "name": "web",
            "active": true,
            "events": ["pull_request"],
            "config": {
              "url": $url,
              "content_type": "json"
            }
          }')
      - name: Update Existing Webhook
        if: env.HOOK_ID != ''
        run: |
          echo "Updating existing webhook with ID: $HOOK_ID"
          gh api --method PATCH "${{ env.REPO_URL }}/$HOOK_ID" --input <(jq -n --arg url "${{ env.WEBHOOK_URL }}" '{
            "config": {
              "url": $url,
              "content_type": "json"
            },
            "events": ["pull_request"]
          }')




          
          


      - name: Initialize Go module & Install Dependencies
        run: cd keploy-review-agent; go mod tidy

      - name: Build Review Agent
        run: go build -o review-agent cmd/server/main.go 

      - name: Start Review Agent
        env:
          PAT_OF_GITHUB: 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  # Using secret instead of hardcoding
        run: |
          nohup ./review-agent  "$PAT_OF_GITHUB" > agent.log 2>&1 &

      - name: sleeping or 10 sec
        run: sleep 10


      - name: Display Agent Logs
        run: cat agent.log
