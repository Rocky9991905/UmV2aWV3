name: Code Review Agent CI/CD

on:
  pull_request:
    branches: [ main ]

jobs:
  review:
    runs-on: ubuntu-latest
    env:
      REVIEW_PORT: 8080
      WEBHOOK_PORT: 6969

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # - name: Update system packages
      #   run: sudo apt update

      # Cache Go modules to avoid downloading dependencies repeatedly
      # - name: Cache Go Modules
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/go/pkg/mod
      #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      #     restore-keys: |
      #       ${{ runner.os }}-go-

      # Cache Node.js dependencies
      # - name: Cache npm modules
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-

      # Cache GolangCI-Lint binary
      # - name: Cache GolangCI-Lint
      #   id: golangci-cache
      #   uses: actions/cache@v3
      #   with:
      #     path: /usr/local/bin/golangci-lint
      #     key: ${{ runner.os }}-golangci-lint-v1.55.2
      #     restore-keys: |
      #       ${{ runner.os }}-golangci-lint-

      # - name: Install Dependencies (Go, Node.js, ESLint, GolangCI-Lint, GitHub CLI)
      #   run: |
      #     sudo apt install -y golang nodejs npm gh
          
      #     # Install npm dependencies only if not cached
      #     if [ ! -d "~/.npm" ]; then
      #       npm install -g eslint
      #     fi

      #     # Install GolangCI-Lint only if not cached
      #     if [ ! -f "/usr/local/bin/golangci-lint" ]; then
      #       curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/local/bin v1.55.2
      #     fi

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # - name: start 6000
      #   run: nohup lt --port 8221 > server.log 2>&1 &
      # - name: Install ngrok
      #   run: wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip;unzip -qq ngrok-stable-linux-amd64.zip;
      # - name: Start ngrok tunnel
      #   run: ./ngrok authtoken 2rqMCQpGwy8Hefx932ZJQCVS0U0_35MwNuTKQeaCf8Kst8LPL && nohup ngrok http 6000 > /dev/null 2>&1 & sleep 5 && curl -s http://127.0.0.1:4040/api/tunnels | grep -o '"public_url":"[^"]*' | cut -d'"' -f4           # save_url_to_filename: ngrok_url.txt

      # - name: Retrieve ngrok URL
      #   run:  cat ngrok_url.txt ; export NGROK_URL=$(cat ngrok_url.txt) ; echo "NGROK_URL=${NGROK_URL}" ; env
      - name: Install Cloudflare Tunnel
        run: |
          curl -fsSL https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/
          
      - name: Start Python HTTP Server
        run: nohup python3 -m http.server 6000 > server.log 2>&1 &

      - name: Start Cloudflare Tunnel
        run: nohup cloudflared tunnel --url http://localhost:6000 > cloudflare.log 2>&1 &

      # - name: Debug GH_TOKEN
      #   env:
      #     GH_TOKEN: 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
      #   run: |
      #     if [ -z "$GH_TOKEN" ]; then
      #       echo "GH_TOKEN is not set!"
      #       exit 1
      #     else
      #       echo "GH_TOKEN is set correctly."
          # fi

      - name: login now
        run: gh auth login -p https -h github.com
        
      # - name: mannual test
      #   run: |
      #       gh api /repos/Rocky9991905/UmV2aWV3/hooks --method POST \
      #         -f name='web' \
      #         -f config='{"url": "'"${NGROK_URL}/webhook"'", "content_type": "json"}' \
      #         -F events='["pull_request"]'

      - name: Retrieve Cloudflare Tunnel URL
        run: |
          sleep 10  # Wait for Cloudflare Tunnel to start
          CLOUDFLARE_URL=$(grep -oP 'https://[a-zA-Z0-9.-]+\.trycloudflare\.com' cloudflare.log | head -n 1)
          echo "CLOUDFLARE_URL=$CLOUDFLARE_URL" >> $GITHUB_ENV

      - name: Output Cloudflare URL
        run: echo "Your Cloudflare Tunnel URL is: $CLOUDFLARE_URL"

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! gh auth status; then
            echo "Authentication failed. Exiting."
            exit 1
          fi

      - name: Create GitHub Webhook
        env:
          REPO: ${{ github.repository }}
        run: |
          gh api --method POST /repos/$REPO/hooks --input <(jq -n --arg url "$CLOUDFLARE_URL/webhook" '{
            "name": "web",
            "active": true,
            "events": ["pull_request"],
            "config": {
              "url": $url,
              "content_type": "json",
              "insecure_ssl": "0"
            }
          }')

              

      - name: Configure GitHub webhook
        run: |
          REPO_URL="/repos/${{ github.repository }}/hooks"
          WEBHOOK_URL="${{ env.NGROK_URL }}/webhook"
      
          # Fetch existing webhooks
          RESPONSE=$(gh api $REPO_URL || echo "")
      
          # Validate JSON response before using jq
          if echo "$RESPONSE" | jq -e . >/dev/null 2>&1; then
            HOOK_ID=$(echo "$RESPONSE" | jq -r '.[] | select(.config.url=="'"$WEBHOOK_URL"'") | .id')
          else
            echo "Error: Invalid JSON response from GitHub API."
            echo "Response: $RESPONSE"
            exit 1
          fi
      
          if [ -z "$HOOK_ID" ] || [ "$HOOK_ID" == "null" ]; then
            echo "Creating new webhook for PR events..."
            gh api --method POST $REPO_URL \
              -f name="web" \
              -F config='{"url": "'"$WEBHOOK_URL"'", "content_type": "json"}' \
              -F events='["pull_request"]'
          else
            echo "Updating existing webhook for PR events..."
            gh api --method PATCH $REPO_URL/$HOOK_ID \
              -F config='{"url": "'"$WEBHOOK_URL"'", "content_type": "json"}' \
              -F events='["pull_request"]'
          fi
          
          


      - name: Initialize Go module & Install Dependencies
        run: go mod tidy

      - name: Build Review Agent
        run: go build -o review-agent .

      - name: Start Review Agent
        env:
          PAT_OF_GITHUB: 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  # Using secret instead of hardcoding
        run: |
          nohup ./review-agent --pat "$PAT_OF_GITHUB" > agent.log 2>&1 &
          sleep 5  # Ensure the service has started

      - name: Display Agent Logs
        run: cat agent.log
